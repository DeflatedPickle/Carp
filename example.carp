package Carp

import System

# Comment

#-
    Multi-line
    Comment
-#

class MyClass {
    # Variable access type can be set in blocks
    private {
        my_int: 1337
        my_str: "Hello"
        my_list: ["Hello", "World"]
        my_bool: true

        # Types of variables are only set if not given a value
        my_empty -> Integer
        # Types can also be given for documentation reasons, though
        # my_empty -> Integer: 5
    }

    public {
        # Semicolons are optional!
        my_name: "MyClass";
    }

    # The init method is called when an instance of a class is made (var: MyClass(*parameters)).
    fun MyClass() {
        # Variables are set with a colon
        one: "Hello"
        two: "World!"
        
        print(one, ", ", two)

        # Testing if a variable is equal to another is done with one "="
        if one = two {
            print("I don't know how that happened.")
        }
        elf one != two {
            print("That's more like it.")
        }
        else {
            print("This also shouldn't happen.")
        }

        # A try/catch statement will try to run a block of code
        # If there are any, the first error will be caught, and the catch block will be run
        try {
            this.my_empty: "This causes an error!"
        }
        catch TypeError {
            this.my_empty: 5
        }

        number: 5
        switch number {
            case 1 { print("It's one!") }
            case 2 { print("It's two!") }
            case "Hello" { print("I don't know how this happened!") }
            case 3 + 1 { print("It's four!") }
            case 5 { print("It's five!") }

            else { print("I don't know what it is!") }
        }
    }

    # Function parameter types are set with "->"
    fun hello(name -> String) {
        doc {
            This funtion welcomes the caller.

            name: The name to say "Hello" to.
        }

        print(f"Hello, {name}")  # Prints a formatted string.
    }

    fun add(number_one -> Integer, number_two -> Integer) -> Integer {
        return number_one + number_two
    }

    # Variable over-loading is supported
    fun add(*numbers -> List<Integer>) -> Integer {
        sum_: 0

        for num in numbers {
            sum+: num
        }

        return sum
    }
}


class MyNewClass {
    fun sub(*numbers -> List<Integer>) -> Integer {
        sum_: 0

        for num in numbers {
            sum-: num
        }

        return sum
    }

    fun add_one(number -> Integer) -> Integer {
        return number++
    }
}


# Classes can inherent from multiple other classes
class MultipleInheritance extends MyClass, MyNewClass {
}


# Like in Kotlin, an object is a class that contains an instance of the class
object MyObject {
    # Objects work just like classes, but have an instance of themselves.
}

interface MyInterface {
    private {
        x -> Integer
    }

    fun X() -> Integer
}

class MyImplementedClass implements MyInterface {
    private {
        x: 5
    }

    override fun X(value) -> Integer {
        get { return this.x }
        set { this.x = value}
    }
}

# Functions can exist outside of classes
fun my_fun() {
    print("Cool!")
}